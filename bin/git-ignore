#!/bin/bash

###########################################################################
#
# git-ignorer
# 
# generate git ignore file by user input
#
#
# @author Luavis.
# @date 2015.06.13
# @license MIT LICENSE
#
###########################################################################

output_file_content="
#########################
#
# Generated by git-ignorer 1.0
# http://github.com/luavis/git-ignore
#
#########################

"

git_ignore=".gitignore"
BASEDIR=$(dirname $0)

# get ignore files
git_ignore_files=( $(for DIRS in $(find $BASEDIR/../share/git-ignore -name "*.gitignore" -type f ); do echo $DIRS; done) ) 

# basename supports for user
support=( $(for ig_file in ${git_ignore_files[@]}; do ig_file=${ig_file##*/}; echo ${ig_file%.gitignore} | tr [:upper:] [:lower:]; done) )

print_bold() {
  printf "\033[1m$1\033[0m"
}

echo_bold() {
  printf "\033[1m$1\033[0m\n"
}

print_support() {
  echo_bold "Available ignore-types are : "
  cnt=$((${#support[@]} / 3 + 1))

  for (( i = 0; i < cnt; i++ )); do
    printf "\t\033[1m%-25s %-25s %-25s\033[0m\n" "${support[$i * 3]}" "${support[$i * 3 + 1]}" "${support[$i * 3 + 2]}"
  done
}

print_help() {
  echo_bold "\033[1mUsage\033[0m:"
  echo "  git ignore <languages|enviroments|IDEs>"
  echo
  print_support
  echo 
}

get_lang_file_name() {
  
  user_input=$1
  index=-1

  for (( i = 0; i < ${#support[@]}; i++ )); do
   if [ "${support[$i]}" = "${user_input}" ]; then
       index=$i;
   fi
  done

  if [ $index = -1 ]; then 
    echo ""
  else
    echo "${git_ignore_files[$index]}"
  fi
}

make_ignore_file() {

  pasted_lang=() 
  target_lang=( "$@" )

  ignore_git=".gitignore"

  target_lang_len=${#target_lang[@]}

  for (( i=0; i<${target_lang_len}; i++ )); do

    target_lang[$i]=$(echo "${target_lang[$i]}" | tr [:upper:] [:lower:])

    if [[ " ${support[*]} " == *" ${target_lang[$i]} "* ]]; then
      
      file_name=$(get_lang_file_name "${target_lang[$i]}")

      if [[ file_name = "" ]]; then
        echo_bold "Unsupport gitignore file"
        print_support
        exit
      fi

      if ! [[ " ${pasted_lang[*]} " == *" $file_name "* ]]; then

        pasted_lang+=( $file_name )

        output_file_content="$output_file_content"$'\n\n'"$(cat ${file_name})"

      fi

    fi
  done

  echo "$output_file_content"

  while true; do
    print_bold "Do you want write in .gitignore?(Y/n) : "

    read -p "" yn

    case $yn in
        [Y]* ) break;;
        [Nn]* ) exit;break;;
        * ) echo "Please answer Y(yes) or n(no).";;
    esac
  done
  
  echo

  while true; do
    print_bold "Do you want to ignore .gitignore?(Y/N) : "

    read -p "" yn

    case $yn in
        [Y]* ) $output_file_content="$output_file_content"$'\n\n'"$ignore_git"; break;;
        [Nn]* ) break;;
        * ) echo "Please answer Y(yes) or n(no).";;
    esac
  done

  if [[ -f $git_ignore ]]; then
    while true; do

      echo_bold "Git ignore file already exists."
      print_bold "Do you want overwrite git ignore?(Y/n) : "
      read -p "" yn

      case $yn in
          [Y]* ) rm -f $git_ignore; break;;
          [Nn]* ) output_file_content=$'\n\n'$output_file_content;break;;
          * ) echo "Please answer Y(yes) or n(no).";;
      esac
    done
  fi

  echo "$output_file_content" >> $git_ignore
  
}

main() {
  if [[ $# = 0 ]]; then
    print_help
  elif [ $1 = 'help' -o $1 = '-h' -o $1 = '--help' ]; then
    print_help
  elif [[ $# -ge 1 ]]; then
    make_ignore_file "$@"
  else
    print_help
  fi

}

main "$@"
